[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 6,
        "importPath": "2024.boilerplate.Day",
        "description": "2024.boilerplate.Day",
        "peekOfCode": "class Day:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        self.loadGrid()\n        self.prettyPrintGrid()\n        return 0\n    def solve_part2(self):\n        return 0\n    def loadInputFiles(self):",
        "detail": "2024.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2024.boilerplate.Day",
        "description": "2024.boilerplate.Day",
        "peekOfCode": "solver = Day()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2024.boilerplate.Day",
        "description": "2024.boilerplate.Day",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2024.boilerplate.Day",
        "description": "2024.boilerplate.Day",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 6,
        "importPath": "2024.day1.Day1",
        "description": "2024.day1.Day1",
        "peekOfCode": "class Day:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        self.loadGrid()\n        t1 = []\n        t2 = []\n        for row in self.grid:\n            row = \"\".join(row).strip().split(\" \")\n            row = [x for x in row if x]",
        "detail": "2024.day1.Day1",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2024.day1.Day1",
        "description": "2024.day1.Day1",
        "peekOfCode": "solver = Day()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day1.Day1",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2024.day1.Day1",
        "description": "2024.day1.Day1",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day1.Day1",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2024.day1.Day1",
        "description": "2024.day1.Day1",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day1.Day1",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 6,
        "importPath": "2024.day2.Day2",
        "description": "2024.day2.Day2",
        "peekOfCode": "class Day:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        self.loadGrid()\n        self.grid = [[int(c) for c in line] for line in self.grid]\n        safe = 0 \n        for i in self.grid:\n            multiplier = self.checkMultiplier(i)\n            check = self.checkValidRow(i, multiplier)",
        "detail": "2024.day2.Day2",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2024.day2.Day2",
        "description": "2024.day2.Day2",
        "peekOfCode": "solver = Day()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day2.Day2",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2024.day2.Day2",
        "description": "2024.day2.Day2",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day2.Day2",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2024.day2.Day2",
        "description": "2024.day2.Day2",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day2.Day2",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 6,
        "importPath": "2024.day3.Day3",
        "description": "2024.day3.Day3",
        "peekOfCode": "class Day:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        sum = 0\n        for mul in self.input_content.split(\"mul(\"):\n            if \")\" not in mul:\n                continue\n            mul = mul.split(\")\")[0].split(\",\")\n            mul = [int(x) for x in mul if x.isdigit()]",
        "detail": "2024.day3.Day3",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2024.day3.Day3",
        "description": "2024.day3.Day3",
        "peekOfCode": "solver = Day()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day3.Day3",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2024.day3.Day3",
        "description": "2024.day3.Day3",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day3.Day3",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2024.day3.Day3",
        "description": "2024.day3.Day3",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day3.Day3",
        "documentation": {}
    },
    {
        "label": "Day4",
        "kind": 6,
        "importPath": "2024.day4.Day4",
        "description": "2024.day4.Day4",
        "peekOfCode": "class Day4:\n    def __init__(self):\n        self.input_content = None\n        self.grid = None\n        self.rows = 0\n        self.cols = 0\n    def solve_part1(self):\n        self.loadGrid()\n        directions = [\n            (0, 1),  ",
        "detail": "2024.day4.Day4",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2024.day4.Day4",
        "description": "2024.day4.Day4",
        "peekOfCode": "solver = Day4()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day4.Day4",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2024.day4.Day4",
        "description": "2024.day4.Day4",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day4.Day4",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2024.day4.Day4",
        "description": "2024.day4.Day4",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day4.Day4",
        "documentation": {}
    },
    {
        "label": "Day5",
        "kind": 6,
        "importPath": "2024.day5.Day5",
        "description": "2024.day5.Day5",
        "peekOfCode": "class Day5:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        rules, updates = self.parseInput()\n        sum = 0\n        for order in updates:\n            if self.verifyOrderIsCorrect(rules, order):\n                sum += order[len(order) // 2]\n        return sum",
        "detail": "2024.day5.Day5",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2024.day5.Day5",
        "description": "2024.day5.Day5",
        "peekOfCode": "solver = Day5()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day5.Day5",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2024.day5.Day5",
        "description": "2024.day5.Day5",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day5.Day5",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2024.day5.Day5",
        "description": "2024.day5.Day5",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day5.Day5",
        "documentation": {}
    },
    {
        "label": "Day6",
        "kind": 6,
        "importPath": "2024.day6.Day6",
        "description": "2024.day6.Day6",
        "peekOfCode": "class Day6:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        self.loadGrid()\n        guard = self.locateGuard()\n        direction = (-1, 0)\n        locations = set()\n        locations.add(guard) \n        while True:",
        "detail": "2024.day6.Day6",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2024.day6.Day6",
        "description": "2024.day6.Day6",
        "peekOfCode": "solver = Day6()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day6.Day6",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2024.day6.Day6",
        "description": "2024.day6.Day6",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day6.Day6",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2024.day6.Day6",
        "description": "2024.day6.Day6",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day6.Day6",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 6,
        "importPath": "generator.day",
        "description": "generator.day",
        "peekOfCode": "class Day:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        self.loadGrid()\n        self.prettyPrintGrid()\n        return 0\n    def solve_part2(self):\n        return 0\n    def loadInputFiles(self):",
        "detail": "generator.day",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "generator.day",
        "description": "generator.day",
        "peekOfCode": "solver = Day()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "generator.day",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "generator.day",
        "description": "generator.day",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "generator.day",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "generator.day",
        "description": "generator.day",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "generator.day",
        "documentation": {}
    },
    {
        "label": "generate",
        "kind": 2,
        "importPath": "generator.generator",
        "description": "generator.generator",
        "peekOfCode": "def generate():\n    folder = os.path.dirname(os.path.abspath(__file__))\n    parent_folder = os.path.dirname(folder) \n    year_folder = os.path.join(parent_folder, str(YEAR))\n    day_folder = os.path.join(year_folder, \"day\"+str(DAY))\n    os.makedirs(day_folder, exist_ok=True)\n    day_txt = os.path.join(folder, \"day.py\")\n    time_txt = os.path.join(folder, \"timetaken.txt\")\n    with open(day_txt, 'r') as file:\n        day_content = file.read().replace('%year%', str(YEAR)).replace('%day%', str(DAY))",
        "detail": "generator.generator",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "generator.generator",
        "description": "generator.generator",
        "peekOfCode": "def input():\n    url = f\"https://adventofcode.com/{YEAR}/day/{DAY}/input\"\n    headers = {\n        \"cookie\": f\"{COOKIES}\"\n    }\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        input_data = response.text.strip()\n        return input_data\n    else:",
        "detail": "generator.generator",
        "documentation": {}
    },
    {
        "label": "YEAR",
        "kind": 5,
        "importPath": "generator.generator",
        "description": "generator.generator",
        "peekOfCode": "YEAR = 2023\nDAY = 5\nCOOKIES = os.getenv('AOC_SESSION')\ndef generate():\n    folder = os.path.dirname(os.path.abspath(__file__))\n    parent_folder = os.path.dirname(folder) \n    year_folder = os.path.join(parent_folder, str(YEAR))\n    day_folder = os.path.join(year_folder, \"day\"+str(DAY))\n    os.makedirs(day_folder, exist_ok=True)\n    day_txt = os.path.join(folder, \"day.py\")",
        "detail": "generator.generator",
        "documentation": {}
    },
    {
        "label": "DAY",
        "kind": 5,
        "importPath": "generator.generator",
        "description": "generator.generator",
        "peekOfCode": "DAY = 5\nCOOKIES = os.getenv('AOC_SESSION')\ndef generate():\n    folder = os.path.dirname(os.path.abspath(__file__))\n    parent_folder = os.path.dirname(folder) \n    year_folder = os.path.join(parent_folder, str(YEAR))\n    day_folder = os.path.join(year_folder, \"day\"+str(DAY))\n    os.makedirs(day_folder, exist_ok=True)\n    day_txt = os.path.join(folder, \"day.py\")\n    time_txt = os.path.join(folder, \"timetaken.txt\")",
        "detail": "generator.generator",
        "documentation": {}
    },
    {
        "label": "COOKIES",
        "kind": 5,
        "importPath": "generator.generator",
        "description": "generator.generator",
        "peekOfCode": "COOKIES = os.getenv('AOC_SESSION')\ndef generate():\n    folder = os.path.dirname(os.path.abspath(__file__))\n    parent_folder = os.path.dirname(folder) \n    year_folder = os.path.join(parent_folder, str(YEAR))\n    day_folder = os.path.join(year_folder, \"day\"+str(DAY))\n    os.makedirs(day_folder, exist_ok=True)\n    day_txt = os.path.join(folder, \"day.py\")\n    time_txt = os.path.join(folder, \"timetaken.txt\")\n    with open(day_txt, 'r') as file:",
        "detail": "generator.generator",
        "documentation": {}
    }
]