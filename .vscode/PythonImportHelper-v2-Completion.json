[
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "time",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "time",
        "description": "time",
        "detail": "time",
        "documentation": {}
    },
    {
        "label": "requests",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "requests",
        "description": "requests",
        "detail": "requests",
        "documentation": {}
    },
    {
        "label": "calendar",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "calendar",
        "description": "calendar",
        "detail": "calendar",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 6,
        "importPath": "2024.boilerplate.Day",
        "description": "2024.boilerplate.Day",
        "peekOfCode": "class Day:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        self.loadGrid()\n        self.prettyPrintGrid()\n        return 0\n    def solve_part2(self):\n        return 0\n    def loadInputFiles(self):",
        "detail": "2024.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2024.boilerplate.Day",
        "description": "2024.boilerplate.Day",
        "peekOfCode": "solver = Day()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2024.boilerplate.Day",
        "description": "2024.boilerplate.Day",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2024.boilerplate.Day",
        "description": "2024.boilerplate.Day",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.boilerplate.Day",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 6,
        "importPath": "2024.day1.Day1",
        "description": "2024.day1.Day1",
        "peekOfCode": "class Day:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        self.loadGrid()\n        t1 = []\n        t2 = []\n        for row in self.grid:\n            row = \"\".join(row).strip().split(\" \")\n            row = [x for x in row if x]",
        "detail": "2024.day1.Day1",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2024.day1.Day1",
        "description": "2024.day1.Day1",
        "peekOfCode": "solver = Day()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day1.Day1",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2024.day1.Day1",
        "description": "2024.day1.Day1",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day1.Day1",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2024.day1.Day1",
        "description": "2024.day1.Day1",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day1.Day1",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 6,
        "importPath": "2024.day2.Day2",
        "description": "2024.day2.Day2",
        "peekOfCode": "class Day:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        self.loadGrid()\n        self.grid = [[int(c) for c in line] for line in self.grid]\n        safe = 0 \n        for i in self.grid:\n            multiplier = self.checkMultiplier(i)\n            check = self.checkValidRow(i, multiplier)",
        "detail": "2024.day2.Day2",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2024.day2.Day2",
        "description": "2024.day2.Day2",
        "peekOfCode": "solver = Day()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day2.Day2",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2024.day2.Day2",
        "description": "2024.day2.Day2",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day2.Day2",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2024.day2.Day2",
        "description": "2024.day2.Day2",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day2.Day2",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 6,
        "importPath": "2024.day3.Day3",
        "description": "2024.day3.Day3",
        "peekOfCode": "class Day:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        sum = 0\n        for mul in self.input_content.split(\"mul(\"):\n            if \")\" not in mul:\n                continue\n            mul = mul.split(\")\")[0].split(\",\")\n            mul = [int(x) for x in mul if x.isdigit()]",
        "detail": "2024.day3.Day3",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2024.day3.Day3",
        "description": "2024.day3.Day3",
        "peekOfCode": "solver = Day()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day3.Day3",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2024.day3.Day3",
        "description": "2024.day3.Day3",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day3.Day3",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2024.day3.Day3",
        "description": "2024.day3.Day3",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day3.Day3",
        "documentation": {}
    },
    {
        "label": "Day4",
        "kind": 6,
        "importPath": "2024.day4.Day4",
        "description": "2024.day4.Day4",
        "peekOfCode": "class Day4:\n    def __init__(self):\n        self.input_content = None\n        self.grid = None\n        self.rows = 0\n        self.cols = 0\n    def solve_part1(self):\n        self.loadGrid()\n        directions = [\n            (0, 1),  ",
        "detail": "2024.day4.Day4",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2024.day4.Day4",
        "description": "2024.day4.Day4",
        "peekOfCode": "solver = Day4()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day4.Day4",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2024.day4.Day4",
        "description": "2024.day4.Day4",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day4.Day4",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2024.day4.Day4",
        "description": "2024.day4.Day4",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day4.Day4",
        "documentation": {}
    },
    {
        "label": "Day5",
        "kind": 6,
        "importPath": "2024.day5.Day5",
        "description": "2024.day5.Day5",
        "peekOfCode": "class Day5:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        rules, updates = self.parseInput()\n        sum = 0\n        for order in updates:\n            if self.verifyOrderIsCorrect(rules, order):\n                sum += order[len(order) // 2]\n        return sum",
        "detail": "2024.day5.Day5",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2024.day5.Day5",
        "description": "2024.day5.Day5",
        "peekOfCode": "solver = Day5()\nsolver.loadInputFiles()\npart1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day5.Day5",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2024.day5.Day5",
        "description": "2024.day5.Day5",
        "peekOfCode": "part1_result = solver.solve_part1()\nprint(\"Solution to Part 1:\", part1_result)\npart2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day5.Day5",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2024.day5.Day5",
        "description": "2024.day5.Day5",
        "peekOfCode": "part2_result = solver.solve_part2()\nprint(\"Solution to Part 2:\", part2_result)",
        "detail": "2024.day5.Day5",
        "documentation": {}
    },
    {
        "label": "Day6",
        "kind": 6,
        "importPath": "2024.day6.Day6",
        "description": "2024.day6.Day6",
        "peekOfCode": "class Day6:\n    def __init__(self):\n        self.input_content = None\n    def solve_part1(self):\n        self.loadGrid()\n        guard = self.locateGuard()\n        direction = (-1, 0)\n        locations = set()\n        locations.add(guard) \n        while True:",
        "detail": "2024.day6.Day6",
        "documentation": {}
    },
    {
        "label": "solver",
        "kind": 5,
        "importPath": "2024.day6.Day6",
        "description": "2024.day6.Day6",
        "peekOfCode": "solver = Day6()\nsolver.loadInputFiles()\nstartTime = int(round(time.time() * 1000))\npart1_result = solver.solve_part1()\nendTime = int(round(time.time() * 1000))\nprint(\"Solution to Part 1:\", part1_result, \"Time:\", endTime - startTime, \"ms\")\nstartTime = int(round(time.time() * 1000))\npart2_result = solver.solve_part2()\nendTime = int(round(time.time() * 1000))\nprint(\"Solution to Part 2:\", part2_result, \"Time:\", endTime - startTime, \"ms\")",
        "detail": "2024.day6.Day6",
        "documentation": {}
    },
    {
        "label": "startTime",
        "kind": 5,
        "importPath": "2024.day6.Day6",
        "description": "2024.day6.Day6",
        "peekOfCode": "startTime = int(round(time.time() * 1000))\npart1_result = solver.solve_part1()\nendTime = int(round(time.time() * 1000))\nprint(\"Solution to Part 1:\", part1_result, \"Time:\", endTime - startTime, \"ms\")\nstartTime = int(round(time.time() * 1000))\npart2_result = solver.solve_part2()\nendTime = int(round(time.time() * 1000))\nprint(\"Solution to Part 2:\", part2_result, \"Time:\", endTime - startTime, \"ms\")",
        "detail": "2024.day6.Day6",
        "documentation": {}
    },
    {
        "label": "part1_result",
        "kind": 5,
        "importPath": "2024.day6.Day6",
        "description": "2024.day6.Day6",
        "peekOfCode": "part1_result = solver.solve_part1()\nendTime = int(round(time.time() * 1000))\nprint(\"Solution to Part 1:\", part1_result, \"Time:\", endTime - startTime, \"ms\")\nstartTime = int(round(time.time() * 1000))\npart2_result = solver.solve_part2()\nendTime = int(round(time.time() * 1000))\nprint(\"Solution to Part 2:\", part2_result, \"Time:\", endTime - startTime, \"ms\")",
        "detail": "2024.day6.Day6",
        "documentation": {}
    },
    {
        "label": "endTime",
        "kind": 5,
        "importPath": "2024.day6.Day6",
        "description": "2024.day6.Day6",
        "peekOfCode": "endTime = int(round(time.time() * 1000))\nprint(\"Solution to Part 1:\", part1_result, \"Time:\", endTime - startTime, \"ms\")\nstartTime = int(round(time.time() * 1000))\npart2_result = solver.solve_part2()\nendTime = int(round(time.time() * 1000))\nprint(\"Solution to Part 2:\", part2_result, \"Time:\", endTime - startTime, \"ms\")",
        "detail": "2024.day6.Day6",
        "documentation": {}
    },
    {
        "label": "startTime",
        "kind": 5,
        "importPath": "2024.day6.Day6",
        "description": "2024.day6.Day6",
        "peekOfCode": "startTime = int(round(time.time() * 1000))\npart2_result = solver.solve_part2()\nendTime = int(round(time.time() * 1000))\nprint(\"Solution to Part 2:\", part2_result, \"Time:\", endTime - startTime, \"ms\")",
        "detail": "2024.day6.Day6",
        "documentation": {}
    },
    {
        "label": "part2_result",
        "kind": 5,
        "importPath": "2024.day6.Day6",
        "description": "2024.day6.Day6",
        "peekOfCode": "part2_result = solver.solve_part2()\nendTime = int(round(time.time() * 1000))\nprint(\"Solution to Part 2:\", part2_result, \"Time:\", endTime - startTime, \"ms\")",
        "detail": "2024.day6.Day6",
        "documentation": {}
    },
    {
        "label": "endTime",
        "kind": 5,
        "importPath": "2024.day6.Day6",
        "description": "2024.day6.Day6",
        "peekOfCode": "endTime = int(round(time.time() * 1000))\nprint(\"Solution to Part 2:\", part2_result, \"Time:\", endTime - startTime, \"ms\")",
        "detail": "2024.day6.Day6",
        "documentation": {}
    },
    {
        "label": "GridUtils",
        "kind": 6,
        "importPath": "2024.day7.day7",
        "description": "2024.day7.day7",
        "peekOfCode": "class GridUtils:\n    @staticmethod\n    def cardinal_directions():\n        return [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    @staticmethod\n    def diagonal_directions():\n        return [(1, 1), (-1, -1), (1, -1), (-1, 1)]\n    @staticmethod\n    def all_directions():\n        return GridUtils.cardinal_directions() + GridUtils.diagonal_directions()",
        "detail": "2024.day7.day7",
        "documentation": {}
    },
    {
        "label": "Stopwatch",
        "kind": 6,
        "importPath": "2024.day7.day7",
        "description": "2024.day7.day7",
        "peekOfCode": "class Stopwatch:\n    def __init__(self):\n        self.start_time = time.time() * 1000 \n    def mark(self):\n        current_time = time.time() * 1000 \n        elapsed_time = current_time - self.start_time \n        self.start_time = current_time \n        return elapsed_time \nclass AocUtils:\n    def __init__(self, year, day):",
        "detail": "2024.day7.day7",
        "documentation": {}
    },
    {
        "label": "AocUtils",
        "kind": 6,
        "importPath": "2024.day7.day7",
        "description": "2024.day7.day7",
        "peekOfCode": "class AocUtils:\n    def __init__(self, year, day):\n        self.year = year\n        self.day = day\n        self.session_cookie = os.getenv(\"AOC_SESSION\")\n        self.input_path = os.path.join(os.getcwd(), str(self.year), \"day\" + str(self.day), \"input.txt\")\n    def getInput(self):\n        return self.input_content\n    def load_input(self):\n        with open(self.input_path, \"r\") as f:",
        "detail": "2024.day7.day7",
        "documentation": {}
    },
    {
        "label": "Day7",
        "kind": 6,
        "importPath": "2024.day7.day7",
        "description": "2024.day7.day7",
        "peekOfCode": "class Day7:\n    def __init__(self, aoc_utils):\n        self.aoc_utils = aoc_utils\n        self.grid = None\n    def load_grid(self):\n        self.aoc_utils.load_input()\n        self.grid = [[c for c in line] for line in self.aoc_utils.input_content.split(\"\\n\")]\n    def pretty_print_grid(self):\n        for line in self.grid:\n            print(\"\".join(line))",
        "detail": "2024.day7.day7",
        "documentation": {}
    },
    {
        "label": "Stopwatch",
        "kind": 6,
        "importPath": "2024.day8.day8",
        "description": "2024.day8.day8",
        "peekOfCode": "class Stopwatch:\n    def __init__(self):\n        self.start_time = time.time() * 1000 \n    def mark(self):\n        current_time = time.time() * 1000 \n        elapsed_time = current_time - self.start_time \n        self.start_time = current_time \n        return elapsed_time \nclass AocUtils:\n    def __init__(self, year, day):",
        "detail": "2024.day8.day8",
        "documentation": {}
    },
    {
        "label": "AocUtils",
        "kind": 6,
        "importPath": "2024.day8.day8",
        "description": "2024.day8.day8",
        "peekOfCode": "class AocUtils:\n    def __init__(self, year, day):\n        self.year = year\n        self.day = day\n        self.session_cookie = os.getenv(\"AOC_SESSION\")\n    def load_input(self, file):\n        self.input_path = os.path.join(os.getcwd(), str(self.year), \"day\" + str(self.day), file+\".txt\")\n        with open(self.input_path, \"r\") as f:\n            self.input_content = f.read().strip()\n    def submit(self, part, result):",
        "detail": "2024.day8.day8",
        "documentation": {}
    },
    {
        "label": "Day8",
        "kind": 6,
        "importPath": "2024.day8.day8",
        "description": "2024.day8.day8",
        "peekOfCode": "class Day8:\n    def __init__(self, aoc_utils):\n        self.aoc_utils = aoc_utils\n        self.grid = None\n        self.aoc_utils.load_input(\"input\")\n        self.input_content = self.aoc_utils.input_content\n    def load_grid(self):\n        self.grid = [[c for c in line] for line in self.input_content.split(\"\\n\")]\n    def pretty_print_grid(self):\n        for line in self.grid:",
        "detail": "2024.day8.day8",
        "documentation": {}
    },
    {
        "label": "GridUtils",
        "kind": 6,
        "importPath": "generator.day",
        "description": "generator.day",
        "peekOfCode": "class GridUtils:\n    @staticmethod\n    def cardinal_directions():\n        return [(1, 0), (-1, 0), (0, 1), (0, -1)]\n    @staticmethod\n    def diagonal_directions():\n        return [(1, 1), (-1, -1), (1, -1), (-1, 1)]\n    @staticmethod\n    def all_directions():\n        return GridUtils.cardinal_directions() + GridUtils.diagonal_directions()",
        "detail": "generator.day",
        "documentation": {}
    },
    {
        "label": "Stopwatch",
        "kind": 6,
        "importPath": "generator.day",
        "description": "generator.day",
        "peekOfCode": "class Stopwatch:\n    def __init__(self):\n        self.start_time = time.time() * 1000 \n    def mark(self):\n        current_time = time.time() * 1000 \n        elapsed_time = current_time - self.start_time \n        self.start_time = current_time \n        return elapsed_time \nclass AocUtils:\n    def __init__(self, year, day):",
        "detail": "generator.day",
        "documentation": {}
    },
    {
        "label": "AocUtils",
        "kind": 6,
        "importPath": "generator.day",
        "description": "generator.day",
        "peekOfCode": "class AocUtils:\n    def __init__(self, year, day):\n        self.year = year\n        self.day = day\n        self.session_cookie = os.getenv(\"AOC_SESSION\")\n    def load_input(self, file):\n        self.input_path = os.path.join(os.getcwd(), str(self.year), \"day\" + str(self.day), file+\".txt\")\n        with open(self.input_path, \"r\") as f:\n            self.input_content = f.read().strip()\n    def submit(self, part, result):",
        "detail": "generator.day",
        "documentation": {}
    },
    {
        "label": "Day",
        "kind": 6,
        "importPath": "generator.day",
        "description": "generator.day",
        "peekOfCode": "class Day:\n    def __init__(self, aoc_utils):\n        self.aoc_utils = aoc_utils\n        self.grid = None\n        self.aoc_utils.load_input(\"test\")\n        self.input_content = self.aoc_utils.input_content\n    def load_grid(self):\n        self.grid = [[c for c in line] for line in self.input_content.split(\"\\n\")]\n    def pretty_print_grid(self):\n        for line in self.grid:",
        "detail": "generator.day",
        "documentation": {}
    },
    {
        "label": "generate",
        "kind": 2,
        "importPath": "generator.generator",
        "description": "generator.generator",
        "peekOfCode": "def generate(year = calendar.datetime.datetime.now().year, day = calendar.datetime.datetime.now().day):\n    folder = os.path.dirname(os.path.abspath(__file__))\n    parent_folder = os.path.dirname(folder) \n    year_folder = os.path.join(parent_folder, str(year))\n    day_folder = os.path.join(year_folder, \"day\"+str(day))\n    if os.path.exists(day_folder):\n        print(f\"Day {day} already exists\")\n        return\n    os.makedirs(day_folder, exist_ok=True)\n    day_txt = os.path.join(folder, \"day.py\")",
        "detail": "generator.generator",
        "documentation": {}
    },
    {
        "label": "testInput",
        "kind": 2,
        "importPath": "generator.generator",
        "description": "generator.generator",
        "peekOfCode": "def testInput(year = calendar.datetime.datetime.now().year, day = calendar.datetime.datetime.now().day):\n    url = f\"https://adventofcode.com/{year}/day/{day}\"\n    headers = {\n        \"cookie\": f\"{COOKIES}\"\n    }\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        test_data = response.text\n        test_data = test_data[test_data.find('For example'):]\n        test_data = test_data[test_data.find('<code>')+6:test_data.find('</code>')]",
        "detail": "generator.generator",
        "documentation": {}
    },
    {
        "label": "input",
        "kind": 2,
        "importPath": "generator.generator",
        "description": "generator.generator",
        "peekOfCode": "def input(year = calendar.datetime.datetime.now().year, day = calendar.datetime.datetime.now().day):\n    url = f\"https://adventofcode.com/{year}/day/{day}/input\"\n    headers = {\n        \"cookie\": f\"{COOKIES}\"\n    }\n    response = requests.get(url, headers=headers)\n    if response.status_code == 200:\n        input_data = response.text.strip()\n        return input_data\n    else:",
        "detail": "generator.generator",
        "documentation": {}
    },
    {
        "label": "COOKIES",
        "kind": 5,
        "importPath": "generator.generator",
        "description": "generator.generator",
        "peekOfCode": "COOKIES = os.getenv('AOC_SESSION')\ndef generate(year = calendar.datetime.datetime.now().year, day = calendar.datetime.datetime.now().day):\n    folder = os.path.dirname(os.path.abspath(__file__))\n    parent_folder = os.path.dirname(folder) \n    year_folder = os.path.join(parent_folder, str(year))\n    day_folder = os.path.join(year_folder, \"day\"+str(day))\n    if os.path.exists(day_folder):\n        print(f\"Day {day} already exists\")\n        return\n    os.makedirs(day_folder, exist_ok=True)",
        "detail": "generator.generator",
        "documentation": {}
    }
]